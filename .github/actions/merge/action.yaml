name: Merge

inputs:
  number:
    description: PR number
    required: false
    type: string
    default: ${{ github.event.pull_request.number }}
  base:
    description: Target branch name
    required: false
    type: string
    default: ${{ github.event.pull_request.base.ref }}
  subject:
    description: Merge commit subject
    required: false
    type: string
    default: ${{ github.event.pull_request.title }}
  body:
    description: Merge commit body
    required: false
    type: string
    default: ${{ github.event.pull_request.body }}
  version-from:
    description: Method of getting the version if not specified
    required: false
    type: choice
    options:
      - 'commit-message'
      - 'pyproject.toml'
      - 'version-file'
    default: 'version-file'
  version-source:
    description: Source containing the version, e.g. path to a file
    required: false
    type: string
    default: ''
  sha-head:
    description: Head SHA hash
    required: false
    type: string
    default: ${{ github.event.pull_request.head.sha }}
  sha-base:
    description: Base SHA hash
    required: false
    type: string
    default: ${{ github.event.pull_request.base.sha }}
  paths:
    description: RegEx Pattern on what files trigger release
    type: string
    default: ''
  repo:
    description: GitHub repository
    type: string
    default: ${{ github.repository }}
  default-branch:
    description: Default branch name
    required: false
    type: string
    default: ${{ github.event.repository.default_branch }}
  release-candidate-branch:
    description: Release candidate branch name
    required: false
    type: string
    default: 'release-candidate'
  token:
    description: Access token
    required: false
    type: string
    default: ${{ github.token }}

runs:
  using: 'composite'
  steps:
  - name: Merge
    env:
      GH_TOKEN: ${{ inputs.token }}
      BODY: ${{ inputs.body }}
    shell: bash
    run: |
      echo "::group::Merging the PR"
      gh pr merge \
        ${{ inputs.number }} \
        --repo "${{ inputs.repo }}" \
        --subject "${{ inputs.subject }}" \
        --body "$BODY" \
        --auto \
        ${{ inputs.base == inputs.default-branch
            && '--squash' || '--merge'}} \
        ${{ inputs.base != inputs.default-branch
            && inputs.base != inputs.release-candidate-branch
            && '--delete-branch \' || '' }}
      echo "::endgroup::"
  - name: Create PR
    id: pr
    if: inputs.base != inputs.default-branch
    uses: ./
    with:
      head: ${{ inputs.base  }}
      version-from: ${{ inputs.version-from }}
      version-source: ${{ inputs.version-source }}
      repo: ${{ inputs.repo }}
      release-candidate-branch: ${{ inputs.release-candidate-branch }}
      default-branch: ${{ inputs.default-branch }}
      token: ${{ inputs.token }}
  - name: Check
    shell: bash
    run: |
      echo "${{ steps.pr.outputs.number }}"
      echo "${{ steps.pr.outputs.base }}"
      echo "${{ steps.pr.outputs.draft }}"
      echo "${{ !steps.pr.outputs.draft }}"
      echo "${{ steps.pr.outputs.title }}"
  - name: Count matching paths
    id: paths
    if: inputs.base == inputs.default-branch
        || steps.pr.outputs.base == inputs.default-branch
        && !steps.pr.outputs.draft
    continue-on-error: true
    shell: bash
    env:
      PATTERN: ${{ inputs.paths }}
    run: |
      echo "::group::Matching paths"
      MATCHES="${{ inputs.paths
                   && format(
                     '$(git diff {0} {1} --name-only | grep -c $PATTERN)',
                     inputs.sha-base, inputs.sha-head)
                   || '1' }}"
      echo "${MATCHES/0/}"
      echo "matches=${MATCHES/0/}" >> "$GITHUB_OUTPUT"
      echo "::endgroup::"
  - name: GH release
    if: ${{ steps.paths.outputs.matches
            && inputs.base == inputs.default-branch
            || steps.paths.outputs.matches
            && steps.pr.outputs.base == inputs.default-branch
            && !steps.pr.outputs.draft }}
    uses: lime-actions/gh-release@latest
    with:
      message: ${{ inputs.base != inputs.default-branch
                    && 'Release candidate' || '' }}
      release-candidate: ${{ steps.pr.outputs.base == inputs.default-branch }}
      version-from: 'version-file'
