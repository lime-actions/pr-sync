name: PR from Version

inputs:
  version-from:
    description: Method of getting the version if not specified
    required: false
    type: choice
    options:
      - 'commit-message'
      - 'pyproject.toml'
      - 'version-file'
    default: 'version-file'

  version-source:
    description: Source containing the version, e.g. path to a file
    required: false
    type: string
    default: ''
  head:
    description: Source branch name
    required: false
    type: string
    default: ${{ github.ref_name }}
  repo:
    description: Repository
    required: false
    type: string
    default: ${{ github.repository }}
  release-candidate-branch:
    description: Release candidate branch name
    required: false
    type: string
    default: 'release-candidate'
  default-branch:
    description: Default branch name
    required: false
    type: string
    default: ${{ github.event.repository.default_branch }}
  token:
    description: Access token
    required: false
    type: string
    default: ${{ github.token }}

outputs:
  base:
    description: Target of the PR
    value: ${{ steps.base.outputs.base }}
  draft:
    description: Whether the PR is in draft state
    value: ${{ steps.info.outputs.isDraft != 'false' && 'true' || '' }}
  number:
    description: Number of the PR
    value: ${{ steps.info.outputs.number }}
  title:
    description: Title of the PR
    value: ${{ steps.title.outputs.title }}

runs:
  using: 'composite'
  steps:
  - name: Get base
    id: base
    shell: bash
    env:
      GH_TOKEN: ${{ inputs.token }}
    run: |
      echo "::group::Selecting base"
      ${{ inputs.head == inputs.release-candidate-branch
          && format('BASE="{0}"',
                     inputs.default-branch)
          || format('if [ -z $(gh api repos/{0}/branches --jq ".[].name" \
                               | sed -n --expression=''s\^{1}$\x\p'') ]
                    then
                      BASE="{2}"
                    else
                      BASE="{1}"
                    fi',
                    inputs.repo,
                    inputs.release-candidate-branch,
                    inputs.default-branch)
          }}
      echo "$BASE"
      echo "base=$BASE" >> "$GITHUB_OUTPUT"
      echo "::endgroup::"
  - name: Get PR info
    id: info
    shell: bash
    env:
      GH_TOKEN: ${{ github.token }}
    run: |
      echo "::group::Get PR info"
      gh pr list \
        --repo "${{ inputs.repo }}" \
        --head "${{ inputs.head }}" \
        --json number,title,baseRefName,isDraft \
        --template '{{ if . }}{{ range $key, $value := (index . 0) }}{{ printf "%v=%v\n" $key $value }}{{ end }}{{ end }}' \
      >> "$GITHUB_OUTPUT"
      echo "::endgroup::"
  - name: Checkout
    if: steps.base.outputs.base == inputs.default-branch
        && !steps.info.outputs.baseRefName
        || steps.base.outputs.base == inputs.default-branch
        && steps.base.outputs.base == steps.info.outputs.baseRefName
        || steps.base.outputs.base == inputs.release-candidate-branch
        && !steps.info.outputs.baseRefName
        || steps.base.outputs.base == inputs.release-candidate-branch
        && steps.base.outputs.base == steps.info.outputs.baseRefName
    uses: actions/checkout@v4
    with:
      sparse-checkout: |
        ${{ inputs.version-source }}
      sparse-checkout-cone-mode: false
  - name: Get version
    id: get-version
    if: steps.base.outputs.base == inputs.default-branch
        && !steps.info.outputs.baseRefName
        || steps.base.outputs.base == inputs.default-branch
        && steps.base.outputs.base == steps.info.outputs.baseRefName
        || steps.base.outputs.base == inputs.release-candidate-branch
        && !steps.info.outputs.baseRefName
        || steps.base.outputs.base == inputs.release-candidate-branch
        && steps.base.outputs.base == steps.info.outputs.baseRefName
    uses: lime-actions/version@latest
    with:
      from: ${{ inputs.version-from }}
      source: ${{ inputs.version-source }}
  - name: Format title
    id: title
    shell: bash
    run: |
      echo "::group::Format title"
      echo "title=${{ steps.base.outputs.base == inputs.default-branch
                      && format('v{0}', inputs.version
                                        || steps.get-version.outputs.version)
                      || steps.base.outputs.base == inputs.release-candidate-branch
                      && format('RC v{0}', inputs.version
                                           || steps.get-version.outputs.version)
                      || steps.base.outputs.base == 'dev'
                      && steps.base.outputs.base }}" \
      >> "$GITHUB_OUTPUT"
      echo "::endgroup::"
  - name: Debug and Create PR
    if: ${{ !steps.info.outputs.number }}
    shell: bash
    env:
      GH_TOKEN: ${{ inputs.token }}
    run: |
      # Save commit body
      printf "%s\n" "$(git log -1 --pretty=format:'%B')" > .body.txt

      echo "::group::GH PR Create"
      gh pr create \
        --repo "${{ inputs.repo }}" \
        --head "${{ inputs.head }}" \
        --base "${{ steps.base.outputs.base }}" \
        --title "${{ steps.title.outputs.title }}" \
        --body-file .body.txt \
        --draft
      echo "::endgroup::"
  - name: Update PR title
    if: ${{ steps.info.outputs.number
            && steps.title.outputs.title != steps.info.outputs.title
            && steps.base.outputs.base == steps.info.outputs.baseRefName }}
    shell: bash
    env:
      GH_TOKEN: ${{ github.token }}
    run: |
      echo "::group::Update PR title"
      gh pr edit ${{ steps.info.outputs.number }} \
        --repo "${{ inputs.repo }}" \
        --title "${{ steps.title.outputs.title }}"
      echo "::endgroup::"
